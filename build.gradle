plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.6.2" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "java-library"
    apply plugin: "architectury-plugin"
    apply plugin: "dev.architectury.loom"
    apply plugin: "me.modmuss50.mod-publish-plugin"

    base {
        java.toolchain.languageVersion = JavaLanguageVersion.of(21)
        compileJava.options.encoding = compileTestJava.options.encoding = javadoc.options.encoding = "UTF-8"

        group = project.maven_group ?: rootProject.maven_group
        archivesName = project.maven_name ?: rootProject.maven_name
        version = project.maven_version ?: rootProject.maven_version
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        //mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
        mappings loom.layered() {
            it.mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
            it.mappings file("../mappings/yarnpatch.tiny")
        }
    }

    if (project.name != "common") {
        publishMods {
            file = remapJar.archiveFile
            type = STABLE
            displayName = rootProject.name + ' ' + project.version.substring(0, project.version.lastIndexOf('+'))
            version = project.version + '-' + project.loom.platform.get().id()
            modLoaders.add(project.loom.platform.get().id())
            changelog = file("../CHANGELOG.md").text
            dryRun = project.maven_version.contains("SNAPSHOT")
            if (project.name == "fabric") {
                modLoaders.add("quilt")
            }

            curseforge {
                accessToken = providers.gradleProperty("curseforge.publishing_token")
                projectId = "686911"
                minecraftVersions.addAll(rootProject.supported_minecraft_versions.split(','))
                javaVersions.add(JavaVersion.toVersion(java.toolchain.getLanguageVersion().get().asInt()))
                clientRequired = true
                serverRequired = false
            }
            modrinth {
                accessToken = providers.gradleProperty("modrinth.publishing_token")
                projectId = "5ZwdcRci"
                minecraftVersions.addAll(rootProject.supported_minecraft_versions.split(','))
            }
        }

        idea {
            module {
                ["run"].each {
                    excludeDirs << file("$projectDir/$it")
                }
            }
        }
    }
}
